import { Link } from "react-router-dom";
import "./style.css";
import { useEffect, useState } from "react";
import { collection, getDocs, query } from "firebase/firestore";
import db from "./FirbaseConfig";
import { ReactComponent as Run } from "../assets/images/run.svg";
import { ReactComponent as Back } from "../assets/images/close.svg";
import { ReactComponent as Captain } from "../assets/images/crown.svg";
import { ReactComponent as Keeper } from "../assets/images/keeper.svg";
const Layout = () => {
  const [data, setData] = useState([]);
  const [player, setPlayer] = useState("PLAYER,PLAYER");
  const [score, setScore] = useState("0,0,0,0");
  const [filterData, setFilterData] = useState([]);

  const userData = async () => {
    const q = query(collection(db, "Laddu"));
    const querySnapshot = await getDocs(q);
    const data = querySnapshot.docs.map((doc) => ({
      ...doc.data(),
      id: doc.id,
      //
      ...doc.data(),
    }));
    //setDetail(data);
    setData(data);
    console.log(data);
  };
  useEffect(() => {
    userData();
  }, []);
  useEffect(() => {
    const arrScore = score.split(",");
    const arrPLayer = player.split(",");
    const arrScore1 = parseInt(arrScore[0]);
    const arrScore2 = parseInt(arrScore[1]);
    const arrScore3 = parseInt(arrScore[2]);
    const arrScore4 = parseInt(arrScore[3]);
    const player1 = arrPLayer[0].toUpperCase();
    const player2 = arrPLayer[1].toUpperCase();
    setFilterData(
      data?.filter((item) => {
        return (
          (parseInt(item.player1Score) >= arrScore1 &&
            parseInt(item.player1Score) <= arrScore2 &&
            parseInt(item.player2Score) >= arrScore3 &&
            parseInt(item.player2Score) <= arrScore4 &&
            item.player1Role.toUpperCase() == player1 &&
            item.player2Role.toUpperCase() == player2) ||
          (item.player1Role.toUpperCase() == player2 &&
            item.player2Role.toUpperCase() == player1 &&
            parseInt(item.player1Score) >= arrScore1 &&
            parseInt(item.player1Score) <= arrScore2 &&
            parseInt(item.player2Score) >= arrScore3 &&
            parseInt(item.player2Score) <= arrScore4) ||
          (parseInt(item.player2Score) >= arrScore1 &&
            parseInt(item.player2Score) <= arrScore2 &&
            parseInt(item.player1Score) >= arrScore3 &&
            parseInt(item.player1Score) <= arrScore4 &&
            item.player1Role.toUpperCase() == player1 &&
            item.player2Role.toUpperCase() == player2) ||
          (item.player1Role.toUpperCase() == player2 &&
            item.player2Role.toUpperCase() == player1 &&
            parseInt(item.player2Score) >= arrScore1 &&
            parseInt(item.player2Score) <= arrScore2 &&
            parseInt(item.player1Score) >= arrScore3 &&
            parseInt(item.player1Score) <= arrScore4)
        );
      })
    );
  }, [data, score, player]);
  // Handle Score
  const handleScore = (prop) => {
    setScore(prop);
    handleRun();
  };
  const handlePlayer = (prop) => {
    setPlayer(prop);
  };
  const [run, setRun] = useState(true);
  const handleRun = () => {
    setRun((pre) => !pre);
  };
  return (
    <div className="layout">
      {/* Nav Bar Starts */}
      <div className="ui-topNav ui-match-nav">
        <div className="title">
          {/* <Link to={"/"}>
            <img
              src="https://github.com/JammyJamm/JSON_Data/blob/main/logo_senthamil.png?raw=true"
              alt="logo"
            />
          </Link>
          <div className="add">
            <Link to={"/add"}>
              <button className="add-btn">
                <img
                  src="https://raw.githubusercontent.com/JammyJamm/JSON_Data/363a4623ccb014c36ace59c04e6cb6979ad0d708/add.svg"
                  alt="add"
                />
              </button>
            </Link>
          </div> */}
          <div className="image">
            <div className="profile">
              <div className="image">
                <Link to={"/"}>
                  <img
                    src="https://github.com/JammyJamm/JSON_Data/blob/main/logo_senthamil.png?raw=true"
                    alt="logo"
                  />
                </Link>
              </div>
            </div>
            <div className="more">
              <Link to={"/add"}>
                <img src="https://raw.githubusercontent.com/JammyJamm/JSON_Data/363a4623ccb014c36ace59c04e6cb6979ad0d708/add.svg" />
              </Link>
            </div>
          </div>
        </div>
      </div>
      <div className="ui-nav">
        <div className="ui-block">
          <button
            className={player == "PLAYER,PLAYER" ? "selected" : ""}
            onClick={() => handlePlayer("PLAYER,PLAYER")}
          >
            <svg
              width="512"
              height="512"
              viewBox="0 0 512 512"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g clipPath="url(#clip0_138_8)">
                <path
                  d="M435 0.000177503C440.949 1.67128 444.538 4.85621 448 10.0002C451.766 17.1432 452.773 25.0957 451 33.0002C448.167 36.8729 444.687 39.5847 440.913 42.4704C437.324 45.3409 434.066 48.5734 430.75 51.7502C429.288 53.1316 427.824 54.5118 426.359 55.8908C425.27 56.9185 425.27 56.9185 424.158 57.967C420.778 61.1512 417.389 64.3258 414 67.5002C408.493 72.6594 402.994 77.8267 397.5 83.0002C391.349 88.7924 385.19 94.5753 379.024 100.351C374.133 104.934 369.253 109.528 364.375 114.125C356.951 121.12 349.486 128.071 342 135C341.53 134.59 341.059 134.18 340.574 133.758C339.952 133.219 339.329 132.68 338.688 132.125C337.765 131.325 337.765 131.325 336.824 130.508C334.865 128.836 334.865 128.836 332 127C329.473 129.187 327.092 131.388 325 134C324.927 136.555 324.927 136.555 326 139C326.698 146.121 324.777 152.484 320.34 158.102C318.313 160.191 316.208 162.103 314 164C313.23 164.673 312.461 165.346 311.668 166.039C294.296 180.716 275.436 192.143 255 202C255.358 202.477 255.715 202.954 256.084 203.445C257.144 204.857 258.203 206.27 259.262 207.682C260.367 209.157 261.474 210.63 262.582 212.103C274.566 228.061 286.053 244.245 295.688 261.75C296.181 262.643 296.674 263.535 297.182 264.455C303.047 275.377 306.2 285.621 303.273 298.098C301.827 302.373 300.383 305.525 297.527 309.074C294.044 313.847 293.335 319.168 292.25 324.875C290.17 335.037 287.722 344.995 284.915 354.976C272.732 398.4 279.191 433.171 293.938 475.563C297.033 484.744 298.264 492.026 294 501C290.535 506.865 284.314 509.896 278 512C267.576 512.885 259.748 512.179 251.27 505.672C245.479 500.016 243.458 491.493 241 484C240.688 483.056 240.375 482.113 240.054 481.14C227.325 442.277 217.646 402.061 231 362C198.292 382.114 186.476 409.486 175.891 445.043C175.543 446.205 175.194 447.367 174.836 448.563C174.171 450.796 173.518 453.031 172.877 455.271C169.871 465.414 165.654 473.694 156.16 479.035C148.616 482.352 140.801 481.864 133.125 479.25C125.858 476.283 122.507 472.889 119 466C115.474 455.421 120.125 444.842 123.375 434.75C123.925 433.011 124.474 431.272 125.022 429.533C126.403 425.17 127.803 420.813 129.209 416.458C129.952 414.15 130.688 411.839 131.421 409.527C142.496 374.614 155.769 347.857 187.75 328.125C208.31 315.878 208.31 315.878 224.531 298.672C225.265 294.491 223.016 291.884 220.75 288.563C220.289 287.86 219.828 287.157 219.353 286.432C217.925 284.272 216.468 282.134 215 280C214.363 279.067 214.363 279.067 213.713 278.116C205.073 265.535 195.519 253.677 185.613 242.078C183.221 239.273 180.885 236.426 178.563 233.563C175.191 229.419 171.74 225.356 168.25 221.313C166.161 218.88 164.079 216.441 162 214C161.139 212.99 161.139 212.99 160.26 211.96C158.494 209.879 156.746 207.785 155 205.688C154.46 205.055 153.92 204.421 153.364 203.769C144.49 193.005 142.886 181.582 144 168C146.087 157.194 152.813 148.108 161.438 141.5C170.35 135.534 178.267 133.963 189 135C189.955 135.357 190.91 135.714 191.895 136.082C198.535 138.045 205.583 135.459 212.012 133.485C212.87 133.224 213.728 132.963 214.612 132.694C225.501 129.315 236.148 125.27 246.813 121.25C249.886 120.096 252.961 118.944 256.037 117.795C257.928 117.088 259.818 116.378 261.707 115.665C271.472 112.004 279.759 108.904 290 113C287.202 116.005 284.471 118.084 280.906 120.11C279.89 120.691 278.873 121.273 277.826 121.873C276.728 122.492 275.631 123.112 274.5 123.75C272.752 124.747 271.004 125.744 269.256 126.742C267.42 127.788 265.582 128.831 263.743 129.874C260.029 131.982 256.322 134.103 252.617 136.227C240.441 143.204 228.25 150.153 216 157C217.32 157.99 218.64 158.98 220 160C241.183 151.134 260.919 140.834 277.785 124.977C284.183 119.267 289.711 115.862 298.375 115.813C299.497 115.798 300.618 115.784 301.773 115.77C304.965 115.998 307.103 116.718 310 118C313.806 117.77 315.521 115.745 318 113C316.445 109.183 313.964 106.808 311 104C312.29 101.135 313.595 99.1867 315.914 97.0744C316.502 96.5331 317.09 95.9917 317.695 95.434C318.65 94.5696 318.65 94.5696 319.625 93.6877C320.994 92.4302 322.362 91.1724 323.73 89.9142C324.437 89.2675 325.144 88.6207 325.873 87.9543C329.252 84.85 332.594 81.7059 335.938 78.5627C337.281 77.3021 338.625 76.0417 339.969 74.7814C340.968 73.8436 340.968 73.8436 341.988 72.8869C343.981 71.0178 345.975 69.1495 347.969 67.2814C354.82 60.8622 361.665 54.4365 368.5 48.0002C375.33 41.5689 382.169 35.148 389.016 28.7346C392.432 25.5341 395.844 22.3288 399.252 19.1198C400.613 17.8435 401.979 16.5723 403.35 15.3063C406.314 12.5655 409.207 9.82593 411.922 6.83611C419.006 -0.604778 424.897 -1.73109 435 0.000177503Z"
                  fill="#C4C4C4"
                ></path>
                <path
                  d="M156 53C157.98 54.65 159.96 56.3 162 58C160.422 61.7105 158.093 64.2991 155.375 67.25C154.558 68.142 153.74 69.0341 152.898 69.9531C152.272 70.6286 151.645 71.3041 151 72C153.64 73.98 156.28 75.96 159 78C159.748 77.6391 160.495 77.2781 161.266 76.9062C162.25 76.4422 163.235 75.9781 164.25 75.5C165.224 75.0359 166.199 74.5719 167.203 74.0938C170 73 170 73 174 73C174.815 75.0822 175.627 77.1658 176.437 79.25C176.89 80.4102 177.342 81.5703 177.809 82.7656C179.826 88.2434 180.241 92.9544 180.312 98.75C180.356 99.9102 180.356 99.9102 180.4 101.094C180.47 107.521 178.897 112.717 174.587 117.601C172.146 119.841 170.441 120.952 167.125 121.312C166.424 121.209 165.722 121.106 165 121C164.773 121.681 164.546 122.361 164.312 123.062C159.991 132.734 152.736 138.096 143.176 142.238C133.668 145.567 123.185 144.899 113.855 141.387C103.992 136.597 97.2319 128.924 93.1875 118.812C89.7504 107.778 90.3796 97.8557 95.2187 87.3555C100.364 78.0504 107.815 71.2897 118 68C122.015 66.9846 125.803 66.866 129.937 66.875C131.122 66.8724 132.307 66.8698 133.527 66.8672C136.775 66.9914 139.812 67.3867 143 68C143.603 67.2523 144.207 66.5047 144.828 65.7344C146.027 64.2571 146.027 64.2571 147.25 62.75C148.039 61.7755 148.828 60.8009 149.641 59.7969C151.665 57.3975 153.741 55.1759 156 53ZM162 83C162.268 83.66 162.536 84.32 162.812 85C164.257 88.6494 165.629 92.3225 167 96C169.64 95.67 172.28 95.34 175 95C174.524 92.8743 174.044 90.7495 173.562 88.625C173.296 87.4416 173.029 86.2583 172.754 85.0391C172.144 82.1051 172.144 82.1051 171 80C167.306 80 165.222 81.2818 162 83ZM168 102C167.67 106.29 167.34 110.58 167 115C171.459 112.849 171.459 112.849 174 109C174.537 106.01 174.812 103.031 175 100C172.573 100 170.302 101.233 168 102Z"
                  fill="#C4C4C4"
                ></path>
                <path
                  d="M78.5586 276.867C79.6665 276.866 80.7745 276.865 81.916 276.863C83.0781 276.867 84.2402 276.871 85.4375 276.875C86.5957 276.871 87.7539 276.867 88.9472 276.863C90.6111 276.865 90.6111 276.865 92.3086 276.867C93.3275 276.868 94.3464 276.869 95.3962 276.871C98 277 98 277 101 278C102.125 284.75 102.125 284.75 101 287C98.1449 287.952 96.0906 288.19 93.1133 288.316C91.7066 288.379 91.7066 288.379 90.2715 288.443C89.295 288.483 88.3185 288.522 87.3125 288.563C85.8304 288.627 85.8304 288.627 84.3183 288.693C81.879 288.799 79.4396 288.902 77 289C77.99 290.485 77.99 290.485 79 292C79.1992 294.45 79.2826 296.786 79.2741 299.237C79.282 300.35 79.282 300.35 79.29 301.486C79.305 303.98 79.3057 306.474 79.3064 308.968C79.314 310.754 79.3224 312.539 79.3316 314.325C79.3536 319.18 79.3623 324.035 79.3674 328.891C79.3711 331.923 79.3773 334.955 79.3844 337.987C79.4089 348.562 79.422 359.136 79.4255 369.71C79.4291 379.573 79.459 389.436 79.5009 399.299C79.5356 407.762 79.5511 416.225 79.5518 424.688C79.5525 429.744 79.5613 434.801 79.5898 439.857C79.6159 444.613 79.6182 449.368 79.6021 454.124C79.6003 455.87 79.607 457.616 79.6229 459.362C79.6433 461.745 79.6329 464.126 79.6147 466.51C79.6279 467.201 79.6411 467.893 79.6547 468.605C79.5883 472.414 79.0649 473.921 76.6178 476.91C73.851 479.119 72.5133 479.912 69 480C66.1347 479.25 64.4727 478.472 62.3762 476.378C60.5132 473.159 60.5778 470.26 60.6056 466.643C60.5995 465.9 60.5934 465.157 60.5871 464.391C60.5704 461.9 60.5753 459.41 60.58 456.918C60.5727 455.133 60.5641 453.347 60.5544 451.562C60.5321 446.71 60.5292 441.859 60.5311 437.008C60.5312 432.96 60.5227 428.911 60.5144 424.863C60.4951 415.313 60.4922 405.764 60.499 396.214C60.5056 386.359 60.4828 376.503 60.4457 366.648C60.415 358.189 60.4036 349.731 60.4075 341.272C60.4096 336.218 60.4041 331.165 60.3796 326.112C60.3574 321.36 60.3592 316.609 60.3796 311.857C60.383 310.113 60.3778 308.369 60.3636 306.625C60.3454 304.244 60.3581 301.865 60.3785 299.484C60.366 298.793 60.3535 298.102 60.3406 297.39C60.4108 293.574 60.9381 292.075 63.3943 289.083C65.7658 287.187 67.0338 286.33 70 286C69.7937 285.423 69.5875 284.845 69.375 284.25C68.9076 281.446 69.4628 280.346 71 278C73.6316 276.684 75.6147 276.87 78.5586 276.867Z"
                  fill="#C4C4C4"
                ></path>
                <path
                  d="M109 287C111.431 288.87 112.641 290.282 114 293C114.106 294.868 114.148 296.74 114.161 298.611C114.171 299.805 114.181 300.999 114.191 302.229C114.197 303.546 114.203 304.863 114.209 306.22C114.218 307.617 114.228 309.013 114.238 310.41C114.27 315.01 114.29 319.611 114.308 324.211C114.313 325.389 114.313 325.389 114.318 326.59C114.349 334.008 114.376 341.427 114.393 348.845C114.415 358.298 114.456 367.75 114.526 377.202C114.574 383.865 114.598 390.527 114.605 397.19C114.61 401.158 114.625 405.126 114.665 409.093C114.955 439.134 114.955 439.134 109.291 453.83C106.983 460.17 107.515 467.129 109 473.625C109.186 474.463 109.371 475.301 109.562 476.164C109.707 476.77 109.851 477.376 110 478C104.759 480.194 104.759 480.194 101.312 479.313C98.5024 477.718 96.5082 476.479 95.4305 473.344C94.8464 470.165 94.8669 467.111 94.8594 463.878C94.8565 463.16 94.8535 462.442 94.8504 461.703C94.8418 459.297 94.8403 456.891 94.8388 454.485C94.8341 452.76 94.8291 451.035 94.8237 449.311C94.8106 444.625 94.8041 439.939 94.7997 435.253C94.7968 432.325 94.7927 429.398 94.7882 426.47C94.7745 417.311 94.7649 408.152 94.761 398.993C94.7565 388.419 94.739 377.846 94.71 367.272C94.6884 359.099 94.6783 350.925 94.677 342.752C94.6759 337.87 94.67 332.989 94.6521 328.107C94.6357 323.515 94.6335 318.924 94.6423 314.332C94.643 312.648 94.6387 310.964 94.6288 309.28C94.6161 306.978 94.622 304.678 94.6324 302.377C94.6309 301.089 94.6295 299.802 94.628 298.476C95.0377 294.647 95.9665 292.255 97.9999 289C101.668 286.555 104.734 286.278 109 287Z"
                  fill="#C4C4C4"
                ></path>
                <path
                  d="M116.719 276.602C117.816 276.598 118.913 276.594 120.043 276.59C121.184 276.601 122.325 276.613 123.5 276.625C125.211 276.608 125.211 276.608 126.957 276.59C128.054 276.594 129.151 276.598 130.281 276.602C131.282 276.605 132.283 276.608 133.314 276.612C136.4 277.058 137.793 277.824 140 280C140.312 282.625 140.312 282.625 140 285C139.67 285.33 139.34 285.66 139 286C140.093 286.392 141.186 286.784 142.312 287.188C146.062 288.532 147.221 290.488 149 294C149.408 296.774 149.408 296.774 149.452 299.825C149.474 300.974 149.496 302.122 149.519 303.305C149.529 305.156 149.529 305.156 149.539 307.043C149.551 308.322 149.564 309.601 149.577 310.918C149.599 313.624 149.609 316.329 149.611 319.035C149.616 322.478 149.667 325.918 149.73 329.36C149.781 332.671 149.782 335.982 149.789 339.293C149.816 340.516 149.842 341.739 149.87 343C149.801 351.756 147.524 356.34 142 363C140.931 364.761 139.889 366.539 138.91 368.352C138.436 369.222 137.963 370.092 137.475 370.988C137.009 371.858 136.543 372.729 136.062 373.625C135.569 374.534 135.076 375.443 134.568 376.379C133.373 378.583 132.184 380.79 131 383C130.67 383 130.34 383 130 383C129.93 371.482 129.877 359.965 129.845 348.447C129.829 343.098 129.808 337.75 129.774 332.402C129.741 327.241 129.723 322.08 129.715 316.919C129.71 314.949 129.699 312.98 129.683 311.011C129.661 308.253 129.658 305.496 129.659 302.738C129.649 301.923 129.638 301.109 129.627 300.27C129.652 295.658 130.194 292.708 133 289C132.032 288.978 132.032 288.978 131.044 288.956C128.112 288.881 125.181 288.785 122.25 288.688C120.726 288.654 120.726 288.654 119.172 288.619C118.192 288.584 117.212 288.548 116.203 288.512C115.302 288.486 114.402 288.459 113.474 288.432C110.552 287.922 109.136 287.034 107 285C106.5 282.5 106.5 282.5 107 280C110.114 276.965 112.449 276.616 116.719 276.602Z"
                  fill="#C4C4C4"
                ></path>
                <path
                  d="M426 124C426.33 124 426.66 124 427 124C428.456 155.223 417.439 181.516 396.938 204.938C378.651 224.775 353.398 239.33 328 248C327.01 248 326.02 248 325 248C324.505 245.03 324.505 245.03 324 242C324.526 241.815 325.052 241.631 325.594 241.44C350.503 232.588 372.286 220.687 392 203C392.825 202.26 393.65 201.52 394.5 200.758C415.858 180.512 424.047 152.525 426 124Z"
                  fill="#C4C4C4"
                ></path>
              </g>
              <defs>
                <clipPath id="clip0_138_8">
                  <rect width="512" height="512" fill="white"></rect>
                </clipPath>
              </defs>
            </svg>
            <span>Player</span>
          </button>
          <button
            className={player == "PLAYER,WK" ? "selected" : ""}
            onClick={() => handlePlayer("PLAYER,WK")}
          >
            <Keeper />
            <span>Keeper</span>
          </button>
          <button
            className="run"
            onClick={handleRun}
            style={{ visibility: "hidden" }}
          >
            {run ? <Run /> : <Back />}
          </button>
          <button
            className={player == "PLAYER,CAPTAIN" ? "selected" : ""}
            onClick={() => handlePlayer("PLAYER,CAPTAIN")}
          >
            <Captain />
            <span>Captain</span>
          </button>
          <button
            className={player == "WK,CAPTAIN" ? "selected" : ""}
            onClick={() => handlePlayer("WK,CAPTAIN")}
          >
            <svg
              width="513"
              height="512"
              viewBox="0 0 513 512"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M96.1363 90.8361C104.481 95.812 109.67 102.7 112.246 112.094C113.262 123.395 112.586 133.08 105.121 142.156C103.493 143.948 102.418 145.008 100.246 146.094C101.674 149.343 103.416 151.521 105.91 154.033C106.662 154.794 107.413 155.555 108.188 156.339C109.409 157.56 109.409 157.56 110.656 158.805C111.918 160.073 111.918 160.073 113.206 161.368C114.989 163.157 116.776 164.944 118.565 166.729C121.282 169.443 123.986 172.17 126.689 174.899C128.427 176.639 130.166 178.379 131.906 180.117C132.706 180.927 133.506 181.736 134.331 182.571C145.284 193.435 156.531 199.382 172.156 200.125C184.699 199.998 195.973 195.148 204.945 186.477C210.919 180.289 216.39 173.757 221.8 167.074C223.577 164.909 225.368 162.769 227.191 160.645C227.688 160.064 228.185 159.484 228.698 158.886C229.667 157.757 230.64 156.631 231.616 155.509C233.906 152.84 235.873 150.348 237.246 147.094C236.359 146.434 235.472 145.774 234.558 145.094C229.182 140.608 226.077 134.794 224.246 128.094C223.247 116.994 223.896 107.359 230.996 98.2814C236.653 92.2236 243.7 88.5028 251.98 87.7579C262.709 87.5165 271.553 88.7684 279.714 96.3907C287.108 104.614 288.828 113.328 288.558 124.106C287.968 134.547 282.337 141.044 275.246 148.094C275.935 148.905 276.625 149.716 277.335 150.551C281.848 155.865 286.345 161.187 290.746 166.594C292.245 168.428 293.745 170.261 295.246 172.094C295.903 172.899 295.903 172.899 296.574 173.721C306.727 186.11 316.834 196.911 333.437 199.613C346.517 200.75 359.439 198.648 369.746 189.995C378.102 182.276 386.207 174.318 394.25 166.275C396.528 163.999 398.815 161.731 401.101 159.463C402.551 158.016 404 156.569 405.449 155.121C406.133 154.444 406.817 153.767 407.522 153.07C408.144 152.445 408.766 151.82 409.407 151.176C409.957 150.627 410.507 150.078 411.074 149.513C412.458 148.144 412.458 148.144 412.246 146.094C411.163 145.29 411.163 145.29 410.058 144.469C403.95 139.311 400.624 132.298 399.91 124.36C399.668 113.63 400.92 104.786 408.543 96.6251C416.766 89.2315 425.48 87.512 436.257 87.7814C444.643 88.2557 451.649 91.8686 457.246 98.0939C464.163 107.292 465.389 116.878 464.246 128.094C462.434 136.052 458.092 141.782 451.996 147.031C450.246 148.094 450.246 148.094 448.246 148.094C448.418 148.785 448.591 149.475 448.769 150.187C449.308 153.474 449.156 156.288 448.879 159.608C448.828 160.249 448.776 160.889 448.723 161.549C448.549 163.688 448.365 165.825 448.182 167.963C448.055 169.499 447.928 171.035 447.803 172.571C447.46 176.739 447.108 180.906 446.755 185.073C446.386 189.438 446.025 193.803 445.663 198.168C445.054 205.5 444.44 212.832 443.822 220.164C443.03 229.565 442.246 238.966 441.465 248.367C440.792 256.459 440.116 264.551 439.439 272.643C439.222 275.239 439.006 277.835 438.789 280.431C438.448 284.517 438.105 288.603 437.76 292.689C437.634 294.185 437.509 295.682 437.384 297.179C437.213 299.228 437.04 301.277 436.866 303.325C436.722 305.043 436.722 305.043 436.574 306.795C436.23 310.246 435.76 313.664 435.246 317.094C431.537 316.63 428.118 316.06 424.496 315.094C415.36 312.741 405.783 312.948 396.414 312.96C395.166 312.958 393.918 312.956 392.633 312.953C389.2 312.948 385.766 312.947 382.333 312.948C378.619 312.949 374.904 312.943 371.19 312.938C363.923 312.93 356.657 312.927 349.391 312.927C343.48 312.926 337.568 312.924 331.657 312.921C314.87 312.912 298.083 312.908 281.296 312.908C279.94 312.909 279.94 312.909 278.557 312.909C277.2 312.909 277.2 312.909 275.816 312.909C261.161 312.909 246.507 312.9 231.852 312.885C216.777 312.871 201.703 312.864 186.628 312.865C178.176 312.865 169.723 312.863 161.271 312.852C154.074 312.843 146.876 312.841 139.679 312.847C136.013 312.851 132.348 312.851 128.682 312.842C106.113 312.12 106.113 312.12 84.0883 316.163C81.2456 317.094 81.2456 317.094 77.2456 317.094C75.2353 296.828 73.3801 276.554 71.6873 256.259C71.5079 254.108 71.328 251.958 71.1481 249.807C70.5817 243.038 70.0171 236.268 69.455 229.498C68.8116 221.749 68.162 214.001 67.5075 206.252C66.9964 200.197 66.4906 194.141 65.9889 188.085C65.6911 184.492 65.3911 180.899 65.0854 177.306C64.7472 173.331 64.4202 169.355 64.0943 165.379C63.9925 164.202 63.8908 163.025 63.786 161.812C63.6991 160.731 63.6123 159.65 63.5228 158.536C63.4447 157.6 63.3665 156.664 63.286 155.7C63.2444 153.014 63.6216 150.699 64.2456 148.094C63.6888 147.846 63.1319 147.599 62.5581 147.344C55.7313 143.654 51.9868 138.401 49.1245 131.32C46.7712 122.681 47.0938 112.318 50.9878 104.203C60.1884 88.7738 79.8209 83.0069 96.1363 90.8361ZM229.641 252.546C225.551 257.266 224.89 260.497 224.968 266.555C225.379 270.318 226.728 272.312 229.246 275.094C236.79 281.033 244.617 280.309 253.8 280.334C255.975 280.344 258.149 280.375 260.324 280.406C272.386 280.78 272.386 280.78 282.85 275.641C286.941 270.922 287.602 267.691 287.523 261.633C287.112 257.869 285.763 255.876 283.246 253.094C275.701 247.155 267.875 247.878 258.691 247.854C256.516 247.844 254.342 247.813 252.168 247.781C240.105 247.408 240.105 247.408 229.641 252.546Z"
                fill="#C4C4C4"
              ></path>
              <path
                d="M108.719 343.586C110.035 343.579 111.352 343.573 112.708 343.567C116.334 343.55 119.958 343.558 123.584 343.571C127.505 343.58 131.426 343.566 135.347 343.555C143.017 343.537 150.686 343.541 158.356 343.552C164.592 343.561 170.828 343.563 177.063 343.558C177.952 343.558 178.841 343.557 179.757 343.556C181.564 343.555 183.37 343.554 185.176 343.553C202.096 343.541 219.015 343.554 235.935 343.576C250.439 343.594 264.943 343.591 279.447 343.572C296.308 343.551 313.168 343.542 330.029 343.555C331.829 343.556 333.628 343.557 335.428 343.558C336.313 343.559 337.198 343.56 338.11 343.56C344.335 343.564 350.56 343.558 356.786 343.548C364.377 343.537 371.967 343.54 379.558 343.562C383.428 343.572 387.298 343.576 391.167 343.563C395.369 343.549 399.571 343.566 403.772 343.586C405.592 343.572 405.592 343.572 407.449 343.559C419.269 343.667 428.628 346.867 437.246 355.094C446.054 364.321 448.871 373.944 448.716 386.458C448.248 398.286 443.697 406.935 435.179 415.066C425.713 423.042 415.856 424.69 403.772 424.602C401.798 424.611 401.798 424.611 399.783 424.62C396.157 424.637 392.533 424.629 388.907 424.616C384.986 424.607 381.065 424.621 377.144 424.632C369.474 424.65 361.805 424.646 354.135 424.635C347.899 424.626 341.663 424.624 335.428 424.629C334.539 424.629 333.65 424.63 332.734 424.631C330.927 424.632 329.121 424.633 327.315 424.635C310.395 424.646 293.476 424.633 276.556 424.611C262.052 424.594 247.548 424.597 233.044 424.615C216.183 424.636 199.323 424.645 182.462 424.633C180.662 424.631 178.863 424.63 177.063 424.629C175.736 424.628 175.736 424.628 174.381 424.627C168.156 424.624 161.931 424.629 155.705 424.639C148.114 424.65 140.524 424.647 132.933 424.626C129.063 424.615 125.193 424.611 121.324 424.624C117.122 424.638 112.921 424.621 108.719 424.602C106.899 424.615 106.899 424.615 105.042 424.629C93.2217 424.52 83.8635 421.321 75.2455 413.094C66.437 403.866 63.6198 394.243 63.7748 381.729C64.243 369.902 68.7939 361.252 77.3119 353.121C86.7781 345.145 96.6346 343.497 108.719 343.586Z"
                fill="#C4C4C4"
              ></path>
              <path
                d="M448.136 90.8359C456.481 95.8118 461.67 102.699 464.246 112.094C465.253 123.296 464.623 133.006 457.246 142.031C451.27 148.64 443.734 151.369 434.992 152.523C425.691 152.904 417.305 150.404 409.808 144.781C402.349 136.958 399.833 128.907 399.88 118.211C400.092 109.725 402.707 102.873 408.543 96.625C419.14 87.0974 435.183 84.62 448.136 90.8359Z"
                fill="#C4C4C4"
              ></path>
              <path
                d="M96.1361 90.8359C104.481 95.8118 109.67 102.699 112.246 112.094C113.244 123.193 112.527 132.724 105.621 141.906C100.121 147.825 91.1547 151.488 83.2377 152.465C73.7386 152.667 65.5082 150.556 57.808 144.781C50.3491 136.958 47.8333 128.907 47.8798 118.211C48.0919 109.725 50.7068 102.873 56.5424 96.625C67.1394 87.0974 83.1827 84.62 96.1361 90.8359Z"
                fill="#C4C4C4"
              ></path>
              <path
                d="M272.136 90.8359C280.481 95.8118 285.67 102.699 288.246 112.094C289.244 123.193 288.527 132.724 281.621 141.906C276.121 147.825 267.155 151.488 259.238 152.465C249.739 152.667 241.508 150.556 233.808 144.781C226.349 136.958 223.833 128.907 223.88 118.211C224.092 109.725 226.707 102.873 232.542 96.625C243.139 87.0974 259.183 84.62 272.136 90.8359Z"
                fill="#C4C4C4"
              ></path>
            </svg>
            <span>Cap/Wk</span>
          </button>
        </div>
      </div>{" "}
      <div className="gameBlock">
        <div className="buttonSection">
          <button className="run" onClick={handleRun}>
            {run ? <Run /> : <Back />}
          </button>
        </div>

        <div
          className="game"
          className={run === false ? "game selected" : "game"}
        >
          <div className="card">
            <h2>0 | Upto 150</h2>
            <button
              onClick={() => handleScore("0,0,0,0")}
              className={score == "0,0,0,0" ? "selected" : ""}
            >
              0-0 | 0-0
            </button>
            <button
              onClick={() => handleScore("0,0,1,9")}
              className={score == "0,0,1,9" ? "selected" : ""}
            >
              0-0 | 1-9
            </button>
            <button
              onClick={() => handleScore("0,0,10,19")}
              className={score == "0,0,10,19" ? "selected" : ""}
            >
              0-0 | 10-19
            </button>
            <button
              onClick={() => handleScore("0,0,20,29")}
              className={score == "0,0,20,29" ? "selected" : ""}
            >
              0-0 | 20-29
            </button>
            <button
              onClick={() => handleScore("0,0,30,39")}
              className={score == "0,0,30,39" ? "selected" : ""}
            >
              0-0 | 30-39
            </button>
            <button
              onClick={() => handleScore("0,0,40,49")}
              className={score == "0,0,40,49" ? "selected" : ""}
            >
              0-0 | 40-49
            </button>
            <button
              onClick={() => handleScore("0,0,50,59")}
              className={score == "0,0,50,59" ? "selected" : ""}
            >
              0-0 | 50-59
            </button>
            <button
              onClick={() => handleScore("0,0,60,69")}
              className={score == "0,0,60,69" ? "selected" : ""}
            >
              0-0 | 60-69
            </button>
            <button
              onClick={() => handleScore("0,0,50,59")}
              className={score == "0,0,70,79" ? "selected" : ""}
            >
              0-0 | 70-79
            </button>
            <button
              onClick={() => handleScore("0,0,80,89")}
              className={score == "0,0,80,89" ? "selected" : ""}
            >
              0-0 | 80-89
            </button>
            <button
              onClick={() => handleScore("0,0,90,99")}
              className={score == "0,0,90,99" ? "selected" : ""}
            >
              0-0 | 90-99
            </button>
            <button
              onClick={() => handleScore("0,0,50,59")}
              className={score == "0,0,50,59" ? "selected" : ""}
            >
              0-0 | 100-150
            </button>
          </div>
          {/* 1 to 9 someting */}
          <div className="card">
            <h2>1 - 9 | Upto 150</h2>
            <button
              onClick={() => handleScore("1,9,1,9")}
              className={score == "1,9,1,9" ? "selected" : ""}
            >
              1-9 | 1-9
            </button>
            <button
              onClick={() => handleScore("1,9,11,19")}
              className={score == "1,9,11,19" ? "selected" : ""}
            >
              1-9 | 10-19
            </button>
            <button
              onClick={() => handleScore("1,9,21,29")}
              className={score == "1,9,21,29" ? "selected" : ""}
            >
              1-9 | 20-29
            </button>
            <button
              onClick={() => handleScore("1,9,30,39")}
              className={score == "1,9,30,39" ? "selected" : ""}
            >
              1-9 | 30-39
            </button>
            <button
              onClick={() => handleScore("1,9,40,49")}
              className={score == "1,9,40,49" ? "selected" : ""}
            >
              1-9 | 40-49
            </button>
            <button
              onClick={() => handleScore("1,9,50,59")}
              className={score == "1,9,50,59" ? "selected" : ""}
            >
              1-9 | 50-59
            </button>
            <button
              onClick={() => handleScore("1,9,60,69")}
              className={score == "1,9,60,69" ? "selected" : ""}
            >
              1-9 | 60-69
            </button>
            <button
              onClick={() => handleScore("1,9,70,79")}
              className={score == "1,9,70,79" ? "selected" : ""}
            >
              1-9 | 70-79
            </button>
            <button
              onClick={() => handleScore("1,9,80,89")}
              className={score == "1,9,80,89" ? "selected" : ""}
            >
              1-9 | 80-89
            </button>
            <button
              onClick={() => handleScore("1,9,90,99")}
              className={score == "1,9,90,99" ? "selected" : ""}
            >
              1-9 | 90-99
            </button>
            <button
              onClick={() => handleScore("1,9,100,150")}
              className={score == "1,9,100,150" ? "selected" : ""}
            >
              1-9 | 100-150
            </button>
          </div>
          {/* 10 to someting */}
          <div className="card">
            <h2>10 - 19 | Upto 150</h2>
            <button
              onClick={() => handleScore("10,19,10,19")}
              className={score == "10,19,10,19" ? "selected" : ""}
            >
              10-19 | 10-19
            </button>
            <button
              onClick={() => handleScore("10,19,20,29")}
              className={score == "10,19,20,29" ? "selected" : ""}
            >
              10-19 | 20-29
            </button>
            <button
              onClick={() => handleScore("10,19,30,39")}
              className={score == "10,19,30,39" ? "selected" : ""}
            >
              10-19 | 30-39
            </button>
            <button
              onClick={() => handleScore("10,19,40,49")}
              className={score == "10,19,40,49" ? "selected" : ""}
            >
              10-19 | 40-49
            </button>
            <button
              onClick={() => handleScore("10,19,50,59")}
              className={score == "10,19,50,59" ? "selected" : ""}
            >
              10-19 | 50-59
            </button>
            <button
              onClick={() => handleScore("10,19,60,69")}
              className={score == "10,19,60,69" ? "selected" : ""}
            >
              10-19 | 60-69
            </button>
            <button
              onClick={() => handleScore("10,19,70,79")}
              className={score == "10,19,70,79" ? "selected" : ""}
            >
              10-19 | 70-79
            </button>
            <button
              onClick={() => handleScore("10,19,80,89")}
              className={score == "10,19,80,89" ? "selected" : ""}
            >
              10-19 | 80-89
            </button>
            <button
              onClick={() => handleScore("10,19,90,99")}
              className={score == "10,19,90,99" ? "selected" : ""}
            >
              10-19 | 90-99
            </button>
            <button
              onClick={() => handleScore("10,19,100,150")}
              className={score == "10,19,100,150" ? "selected" : ""}
            >
              10-19 | 100-150
            </button>
          </div>
          {/* Consdition 20 to 29 */}
          <div className="card">
            <h2>20 - 29 | Upto 150</h2>
            <button
              onClick={() => handleScore("20,29,20,29")}
              className={score == "20,29,20,29" ? "selected" : ""}
            >
              20-29 | 20-29
            </button>
            <button
              onClick={() => handleScore("20,29,30,39")}
              className={score == "20,29,30,39" ? "selected" : ""}
            >
              20-29 | 30-39
            </button>
            <button
              onClick={() => handleScore("20,29,40,49")}
              className={score == "20,29,40,49" ? "selected" : ""}
            >
              20-29 | 40-49
            </button>
            <button
              onClick={() => handleScore("20,29,50,59")}
              className={score == "20,29,50,59" ? "selected" : ""}
            >
              20-29 | 50-59
            </button>
            <button
              onClick={() => handleScore("20,29,60,69")}
              className={score == "20,29,60,69" ? "selected" : ""}
            >
              20-29 | 60-69
            </button>
            <button
              onClick={() => handleScore("20,29,70,79")}
              className={score == "20,29,70,79" ? "selected" : ""}
            >
              20-29 | 70-79
            </button>
            <button
              onClick={() => handleScore("20,29,80,89")}
              className={score == "20,29,80,89" ? "selected" : ""}
            >
              20-29 | 80-89
            </button>
            <button
              onClick={() => handleScore("20,29,90,99")}
              className={score == "20,29,90,99" ? "selected" : ""}
            >
              20-29 | 90-99
            </button>
            <button
              onClick={() => handleScore("20,29,100,150")}
              className={score == "20,29,100,150" ? "selected" : ""}
            >
              20-29 | 100-150
            </button>
          </div>
          {/* 30 t0 40  */}
          <div className="card">
            <h2>30 - 39 | Upto 150</h2>
            <button
              onClick={() => handleScore("30,39,30,39")}
              className={score == "30,39,30,39" ? "selected" : ""}
            >
              30-39 | 30-39
            </button>
            <button
              onClick={() => handleScore("30,39,40,49")}
              className={score == "30,39,40,49" ? "selected" : ""}
            >
              30-39 | 40-49
            </button>
            <button
              onClick={() => handleScore("30,39,50,59")}
              className={score == "30,39,50,59" ? "selected" : ""}
            >
              30-39 | 50-59
            </button>
            <button
              onClick={() => handleScore("30,39,60,69")}
              className={score == "30,39,60,69" ? "selected" : ""}
            >
              30-39 | 60-69
            </button>
            <button
              onClick={() => handleScore("30,39,70,79")}
              className={score == "30,39,70,79" ? "selected" : ""}
            >
              30-39 | 70-79
            </button>{" "}
            <button
              onClick={() => handleScore("30,39,80,89")}
              className={score == "30,39,80,89" ? "selected" : ""}
            >
              30-39 | 80-89
            </button>
            <button
              onClick={() => handleScore("30,39,90,99")}
              className={score == "30,39,90,99" ? "selected" : ""}
            >
              30-39 | 90-99
            </button>
            <button
              onClick={() => handleScore("30,39,100,150")}
              className={score == "30,39,100,150" ? "selected" : ""}
            >
              30-39 | 100-150
            </button>
          </div>
          <div className="card">
            <h2>30 - 39 | Upto 150</h2>
            <button
              onClick={() => handleScore("40,49,40,49")}
              className={score == "40,49,40,49" ? "selected" : ""}
            >
              40-49 | 40-49
            </button>
            <button
              onClick={() => handleScore("40,49,50,59")}
              className={score == "40,49,50,59" ? "selected" : ""}
            >
              40-49 | 50-59
            </button>
            <button
              onClick={() => handleScore("40,49,60,69")}
              className={score == "40,49,60,69" ? "selected" : ""}
            >
              40-49 | 60-69
            </button>
            <button
              onClick={() => handleScore("40,49,70,79")}
              className={score == "40,49,70,79" ? "selected" : ""}
            >
              40-49 | 70-79
            </button>
            <button
              onClick={() => handleScore("40,49,80,89")}
              className={score == "40,49,80,89" ? "selected" : ""}
            >
              40-49 | 80-89
            </button>
            <button
              onClick={() => handleScore("40,49,90,99")}
              className={score == "40,49,90,99" ? "selected" : ""}
            >
              40-49 | 90-99
            </button>
            <button
              onClick={() => handleScore("40,49,100,150")}
              className={score == "40,49,100,150" ? "selected" : ""}
            >
              40-49 | 100-150
            </button>
          </div>
        </div>
      </div>
      <div className="main">
        <div
          className="main-content"
          style={{
            marginTop: "42px",
            display: "flex",
            flexDirection: "column",
          }}
        >
          <div
            className="card col-12 ui-note"
            style={{ margin: "5px 0px", display: "flex", width: "100%" }}
          >
            <div className="note" style={{ width: "100%" }}>
              <i>
                <b>
                  <i>{player} </i>
                </b>
              </i>

              <span>
                {/* 1<sup>No</sup> (0,23) - 2<sup>Yes</sup> (24,43) */}
                {score}
              </span>
            </div>
          </div>
          {/* Main Card Starts */}
          <div className="main-card col-12 ui-player-table">
            {filterData?.map((list) => {
              return (
                <div className="card">
                  <div className="middle">
                    <label style={{ display: "flex", flexDirection: "column" }}>
                      <span>{list.player1Score}</span>
                      <b
                        style={{
                          fontWeight: "500",
                          color: " rgba(65, 65, 65, 0.6)",
                        }}
                      >
                        {list.player1Name}
                      </b>
                    </label>
                    <label className="result">
                      {list.result
                        .trim()
                        .split(",")
                        .map((score) => {
                          return (
                            <span
                              className="blue"
                              style={{ margin: "0px 2px 2px 0px" }}
                            >
                              {score}
                            </span>
                          );
                        })}

                      {/* <span className="green">First</span> */}
                    </label>
                    <label
                      style={{
                        display: "flex",
                        flexDirection: "column",
                        textAlign: "right",
                      }}
                    >
                      <span>{list.player2Score}</span>
                      <b
                        style={{
                          fontWeight: "500",
                          color: " rgba(65, 65, 65, 0.6)",
                        }}
                      >
                        {list.player2Name}
                      </b>
                    </label>
                  </div>
                  {/* <div className="bottom">
                    <label className="state">
                      <i className="note">{list.player1Score}</i>
                    </label>
                    <label>{list.result}</label>
                    <label className="state">
                      <i className="note">{list.player2Score}</i>
                    </label>
                  </div> */}
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};
export default Layout;
